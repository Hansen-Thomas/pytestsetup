"""Change primary key in table Relevance

Revision ID: fe47b29a3a73
Revises: 59ed6c5224c6
Create Date: 2025-01-23 15:53:20.170145

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "fe47b29a3a73"
down_revision: Union[str, None] = "59ed6c5224c6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # drop foreignkey-constraint on table card:
    op.drop_constraint(
        "Card_id_relevance_fkey",
        "Card",
        type_="foreignkey",
    )
    # alter type of column id_relevance in table card:
    op.alter_column(
        "Card",
        "id_relevance",
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=True,
    )
    # alter type of column id in table relevance:
    op.alter_column(
        "Relevance",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('\"Relevance_id_seq\"'::regclass)"),
    )
    # add foreignkey-constraint on table card again:
    op.create_foreign_key(
        "Card_id_relevance_fkey",
        "Card",
        "Relevance",
        ["id_relevance"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # drop foreignkey-constraint on table card:
    op.drop_constraint(
        "Card_id_relevance_fkey",
        "Card",
        type_="foreignkey",
    )
    # alter type of column id in table relevance:
    op.alter_column(
        "Relevance",
        "id",
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('\"Relevance_id_seq\"'::regclass)"),
    )
    # alter type of column id_relevance in table card:
    op.alter_column(
        "Card",
        "id_relevance",
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    # add foreignkey-constraint on table card again:
    op.create_foreign_key(
        "Card_id_relevance_fkey",
        "Card",
        "Relevance",
        ["id_relevance"],
        ["id"],
    )
    # ### end Alembic commands ###
